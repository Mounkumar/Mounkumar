import groovy.io.FileType
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
import groovy.lang.*
import groovy.util.*
import java.lang.*
import java.util.*
import java.io.*
import java.net.*
plugins {
	id "org.openapi.generator" version "4.2.3"
	//id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	//id 'war'
}

group = 'com.demo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {

    // try to fetch dependencies from maven central
    mavenCentral()

}

apply from: 'dependencies.gradle'

// here we are going to store oas files
def swaggerList = []
def openapiTaskList = []

def dlist = []
new File("$rootDir/src/main/resources/apiYAML/").eachDir {dlist << it.name }
dlist.each {
	println it
	
	def subdir = new File("$rootDir/src/main/resources/apiYAML/".toString()+it)
	subdir.eachFileRecurse(FileType.FILES) { file ->
    if (file.getName().endsWith(".yaml"))
    println file.toString()+"MOUNI";
    	def apiName = file.getName().replace(".yaml", "");
        swaggerList << it+"/"+apiName
}
}

// iterate on all oas files and generate a task for each one with the nomenclature openApiGenerate + yaml name
swaggerList.each {

    String[] str;
    str = it.split('/');
   
    def modulename = str[0]
    def apiName = str[1];
    

    tasks.create("openApiGenerate" + apiName.capitalize(), GenerateTask.class, {
        generatorName = "spring"
        inputSpec = "$rootDir/src/main/resources/apiYAML/".toString()+"${modulename}/"+ "${apiName}.yaml"
        outputDir = "${rootDir}".toString()
        templateDir = "$rootDir/src/main/resources/templates".toString()
		//rawOptions = ["--import-mappings", "AddressDetails=com.infosys.fdb.common.model.AddressDetails"]
		//importMappings=[ "AddressDetails=com.infosys.fdb.common.model.AddressDetails"]
		
        systemProperties = [
            modelDocs      : "false",
            models         : "",
            apis           : "",
            supportingFiles: "false"
    	]
	    configOptions = [
	            useOptional          : "true",
	            swaggerDocketConfig  : "false",
	            performBeanValidation: "false",
	            useBeanValidation    : "false",
	            useTags              : "true",
	            singleContentTypes   : "false",
	            basePackage          : "com.company.project."+modulename+"."+apiName+".controller",
	            configPackage        : "com.company.project."+modulename+"."+apiName+".controller",
	            title                : rootProject.name,
	            java8                : "false",
	            dateLibrary          : "java8",
	            serializableModel    : "true",
	            artifactId           : rootProject.name,
	            apiPackage           : "com.company.project."+modulename+"."+apiName+".controller",
	            modelPackage         : "com.company.project."+modulename+"."+apiName+".model",
	            invokerPackage       : "com.company.project."+modulename+"."+apiName+".controller",
	            interfaceOnly        : "false",
	            delegatePattern		 : "true",
	           	useLombok			 : "true",
				//importMappings		 : "AddressDetails=com.infosys.fdb.common.model.AddressDetails"
	    ]
		//importMappings = [
			//AddressDetails: "com.infosys.fdb.common.model.AddressDetails",
			//NameDetails:"com.infosys.fdb.common.model.NameDetails"
		//]
		//importMappings = "AddressDetails"="com.infosys.fdb.common.model.AddressDetails"
    })
    
    openapiTaskList << "openApiGenerate" + apiName.capitalize()
}

// execute each task
openapiTaskList.each {
    compileJava.dependsOn(it)    
}